#!/bin/bash

# üìù –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
# –ê–≤—Ç–æ—Ä: Smart Home Monitoring System
# –í–µ—Ä—Å–∏—è: 1.0

CONFIG_FILE="/etc/logging-service/config"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
else
    echo "$(date '+%Y-%m-%d %H:%M:%S') [ERROR] Config file not found: $CONFIG_FILE" >&2
    exit 1
fi

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
LOG_FORMAT="${LOG_FORMAT:-plain}"  # plain, json, syslog
MAX_MESSAGE_LENGTH="${MAX_MESSAGE_LENGTH:-2048}"
ENABLE_REMOTE_LOGGING="${ENABLE_REMOTE_LOGGING:-false}"

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è —Å–∞–º–æ–≥–æ logging-service (–∏–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏)
LOGGING_SERVICE_LOG="${LOGGING_SERVICE_LOG:-/var/log/logging-service.log}"
ENABLE_SELF_LOGGING="${ENABLE_SELF_LOGGING:-true}"
SELF_LOG_LEVEL="${SELF_LOG_LEVEL:-INFO}"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è logging-service (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)
log_self() {
    local level="$1"
    local message="$2"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —Å–∞–º–æ–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–≤–µ–Ω—å
    if [[ "$ENABLE_SELF_LOGGING" != "true" ]]; then
        return 0
    fi
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é —Å–∞–º–æ–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    case "$SELF_LOG_LEVEL" in
        "ERROR") [[ "$level" == "ERROR" ]] || return 0 ;;
        "WARN") [[ "$level" =~ ^(ERROR|WARN)$ ]] || return 0 ;;
        "INFO") [[ "$level" =~ ^(ERROR|WARN|INFO)$ ]] || return 0 ;;
        "DEBUG") ;; # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë
    esac
    
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local hostname=$(hostname)
    local pid=$$
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∞–º–æ–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    echo "$timestamp [$level] [logging-service] [PID:$pid] $message" >> "$LOGGING_SERVICE_LOG"
}

# –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_structured() {
    local service="$1"
    local level="$2"     # DEBUG, INFO, WARN, ERROR, CRITICAL
    local message="$3"
    local extra_data="$4"  # JSON string –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local hostname=$(hostname)
    local pid=$$
    local caller_pid="$PPID"
    local caller_process="$(ps -o comm= -p $PPID 2>/dev/null || echo 'unknown')"
    
    # –û–±—Ä–µ–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if [[ ${#message} -gt $MAX_MESSAGE_LENGTH ]]; then
        message="${message:0:$((MAX_MESSAGE_LENGTH-20))}...[TRUNCATED]"
    fi
    
    case "$LOG_FORMAT" in
        "json")
            local log_entry=$(cat <<EOF
{
  "timestamp": "$timestamp",
  "hostname": "$hostname",
  "service": "$service",
  "level": "$level",
  "message": "$message",
  "pid": $pid,
  "caller_pid": $caller_pid,
  "caller_process": "$caller_process"$([ -n "$extra_data" ] && echo ",\"extra\": $extra_data" || echo "")
}
EOF
            )
            ;;
        "syslog")
            # RFC 3164 format
            local facility="16"  # local0
            local severity=$(get_syslog_severity "$level")
            local priority=$((facility * 8 + severity))
            log_entry="<$priority>$timestamp $hostname $service[$pid]: [$level] $message"
            ;;
        *)
            # Plain format (default)
            log_entry="$timestamp [$level] [$service] [PID:$pid] [$caller_process] $message"
            ;;
    esac
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    local log_file=$(get_log_file "$service")
    
    # –°–∞–º–æ–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)
    if [[ "$level" == "ERROR" ]] || [[ "$level" == "CRITICAL" ]]; then
        log_self "INFO" "Processing $level event from $service: $message"
    fi
    
    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    echo "$log_entry" >> "$log_file"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
    if [[ $? -ne 0 ]]; then
        log_self "ERROR" "Failed to write to log file: $log_file"
        return 1
    fi
    
    # –£–¥–∞–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if [[ "$ENABLE_REMOTE_LOGGING" == "true" ]] && [[ -n "$REMOTE_LOG_ENDPOINT" ]]; then
        log_self "DEBUG" "Sending log to remote endpoint: $REMOTE_LOG_ENDPOINT"
        send_remote_log "$log_entry" "$service" "$level" &
    fi
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    if [[ "$level" == "CRITICAL" ]] && [[ -n "$CRITICAL_NOTIFICATION_COMMAND" ]]; then
        log_self "INFO" "Sending critical notification for: $service"
        $CRITICAL_NOTIFICATION_COMMAND "$service" "$message" &
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞ –ø–æ —Å–µ—Ä–≤–∏—Å—É
# ‚úÖ –í–ê–ñ–ù–û: –ö–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å = –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª (–ù–ï —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è!)
# –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
get_log_file() {
    local service="$1"
    case "$service" in
        "ha-watchdog") echo "/var/log/ha-watchdog.log" ;;              # ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        "ha-failure-notifier") echo "/var/log/ha-failure-notifier.log" ;; # ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è —Å–±–æ–µ–≤
        "telegram-sender") echo "/var/log/telegram-sender.log" ;;      # ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è Telegram
        "update-checker") echo "/var/log/ha-update-checker.log" ;;     # ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        "nightly-reboot") echo "/var/log/ha-reboot.log" ;;             # ‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
        *) echo "/var/log/ha-${service}.log" ;;                        # ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    esac
}

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤ syslog severity
get_syslog_severity() {
    case "$1" in
        "DEBUG") echo "7" ;;
        "INFO") echo "6" ;;
        "WARN") echo "4" ;;
        "ERROR") echo "3" ;;
        "CRITICAL") echo "2" ;;
        *) echo "6" ;;
    esac
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π –ª–æ–≥-—Å–µ—Ä–≤–µ—Ä
send_remote_log() {
    local log_entry="$1"
    local service="$2"
    local level="$3"
    
    if [[ -n "$REMOTE_LOG_ENDPOINT" ]]; then
        local response=$(curl -s --max-time 5 \
             -H "Content-Type: application/json" \
             -d "$log_entry" \
             -w "HTTP_CODE:%{http_code}" \
             "$REMOTE_LOG_ENDPOINT" 2>&1)
             
        local http_code=$(echo "$response" | grep -o 'HTTP_CODE:[0-9]*' | cut -d: -f2)
        
        if [[ "$http_code" == "200" ]] || [[ "$http_code" == "201" ]]; then
            log_self "DEBUG" "Remote log sent successfully for $service (HTTP: $http_code)"
        else
            log_self "WARN" "Remote log failed for $service (HTTP: $http_code)"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
log_simple() {
    local service="$1"
    local message="$2"
    local level="${3:-INFO}"
    
    log_structured "$service" "$level" "$message"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
log_with_metrics() {
    local service="$1"
    local level="$2"
    local message="$3"
    local duration="$4"
    local status_code="$5"
    
    local extra_data=""
    if [[ -n "$duration" ]] || [[ -n "$status_code" ]]; then
        extra_data="{"
        [[ -n "$duration" ]] && extra_data+='"duration_ms": '$duration
        [[ -n "$duration" && -n "$status_code" ]] && extra_data+=', '
        [[ -n "$status_code" ]] && extra_data+='"status_code": '$status_code
        extra_data+="}"
    fi
    
    log_structured "$service" "$level" "$message" "$extra_data"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞ –¥–ª—è —Å–∞–º–æ–≥–æ logging-service –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [[ ! -f "$LOGGING_SERVICE_LOG" ]]; then
        mkdir -p "$(dirname "$LOGGING_SERVICE_LOG")" 2>/dev/null
        touch "$LOGGING_SERVICE_LOG"
        chmod 644 "$LOGGING_SERVICE_LOG"
        log_self "INFO" "Logging service initialized, log file created: $LOGGING_SERVICE_LOG"
    fi
    
    case "${1:-}" in
        "")
            echo "ERROR: Parameters required"
            echo "Usage: $0 <service> <level> <message> [extra_json]"
            echo "   or: $0 simple <service> <message> [level]"
            echo "   or: $0 metrics <service> <level> <message> <duration_ms> [status_code]"
            log_self "WARN" "Called without parameters"
            exit 1
            ;;
        "simple")
            log_self "DEBUG" "Processing simple log call for service: $2"
            log_simple "$2" "$3" "$4"
            ;;
        "metrics")
            log_self "DEBUG" "Processing metrics log call for service: $2"
            log_with_metrics "$2" "$3" "$4" "$5" "$6"
            ;;
        *)
            log_self "DEBUG" "Processing structured log call for service: $1"
            log_structured "$1" "$2" "$3" "$4"
            ;;
    esac
    
    log_self "DEBUG" "Log processing completed successfully"
fi
