#!/bin/bash

tailnet="tailscale"
url="https://api.tailscale.com/api/v2/tailnet/neoselcev.github/devices"
apikey=$(<$HOME/keys/tailscale.api.key)
echo $apikey

# Print all device names in the tailnet
echo "Device names in tailnet '$tailnet':"
# Parse each device as a compact JSON object and extract fields inside the loop.
# This avoids any ambiguity from field splitting when some fields are empty.
curl -s -H "Authorization: Bearer ${apikey}" "${url}" \
  | jq -c '.devices[]' \
  | while read -r dev; do
    hostname=$(jq -r '.hostname // ""' <<<"$dev")
    name=$(jq -r '.name // ""' <<<"$dev")
    id=$(jq -r '.id // ""' <<<"$dev")

    # Optional debug output: set DEBUG=1 when running the script to see parsed fields
    if [[ -n "$DEBUG" ]]; then
        printf 'DEBUG: hostname=[%s] name=[%s] id=[%s]\n' "$hostname" "$name" "$id" >&2
    fi

    if [[ $hostname == "rpi3-20250711" && $name != "rpi3-20250711.tail586076.ts.net" ]]; then
        echo "Matched $id"
        curl -s -X DELETE -H "Authorization: Bearer ${apikey}" "https://api.tailscale.com/api/v2/device/$id"
    else
        echo "Device: $name"
    fi
done
#curl -s "https://api.tailscale.com/api/v2/tailnet/$tailnet/devices" -u "$apikey:" |jq -r '.devices[] |  "\(.lastSeen) \(.id)"' |
#  while read seen id; do
#		if [[ $seen < $oldenough ]]
#		then
#			echo $id " was last seen " $seen " getting rid of it"
#			curl -s -X DELETE "https://api.tailscale.com/api/v2/device/$id" -u "$apikey:"
#		else
#			echo $id " was last seen " $seen " keeping it"
#		fi
#		done