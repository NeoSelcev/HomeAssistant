#!/bin/bash

# HA Failure Notifier —Å Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
LOG_FILE="/var/log/ha-failures.log"
ACTION_LOG="/var/log/ha-failure-notifier.log"
HASH_FILE="/var/lib/ha-failure-notifier/hashes.txt"
POSITION_FILE="/var/lib/ha-failure-notifier/position.txt"
METADATA_FILE="/var/lib/ha-failure-notifier/metadata.txt"
CONFIG_FILE="/etc/ha-watchdog/config"
THROTTLE_FILE="/var/lib/ha-failure-notifier/throttle.txt"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ
THROTTLE_MINUTES=${THROTTLE_MINUTES:-60}

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ config —Ñ–∞–π–ª–µ)
# TELEGRAM_BOT_TOKEN="your_bot_token_here"
# TELEGRAM_CHAT_ID="your_chat_id_here"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
[[ ! -f "$HASH_FILE" ]] && mkdir -p "$(dirname "$HASH_FILE")" && touch "$HASH_FILE"
[[ ! -f "$POSITION_FILE" ]] && mkdir -p "$(dirname "$POSITION_FILE")" && echo "0" > "$POSITION_FILE"
[[ ! -f "$METADATA_FILE" ]] && mkdir -p "$(dirname "$METADATA_FILE")" && touch "$METADATA_FILE"
[[ ! -f "$THROTTLE_FILE" ]] && mkdir -p "$(dirname "$THROTTLE_FILE")" && touch "$THROTTLE_FILE"

log_action() {
    echo "$(date '+%F %T') [FAILURE-NOTIFIER] $1" >> "$ACTION_LOG"
}

# –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
get_file_metadata() {
    local file="$1"
    if [[ -f "$file" ]]; then
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º: —Ä–∞–∑–º–µ—Ä:–≤—Ä–µ–º—è_—Å–æ–∑–¥–∞–Ω–∏—è:–≤—Ä–µ–º—è_–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:—Ö–µ—à_–ø–µ—Ä–≤–æ–π_—Å—Ç—Ä–æ–∫–∏
        local size=$(stat -c%s "$file" 2>/dev/null || echo "0")
        local ctime=$(stat -c%Z "$file" 2>/dev/null || echo "0")  # –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è inode (—Å–æ–∑–¥–∞–Ω–∏—è/—Ä–æ—Ç–∞—Ü–∏–∏)
        local mtime=$(stat -c%Y "$file" 2>/dev/null || echo "0")  # –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        local first_line_hash=""
        
        if [[ -s "$file" ]]; then
            first_line_hash=$(head -n1 "$file" 2>/dev/null | sha256sum | cut -d' ' -f1)
        fi
        
        echo "${size}:${ctime}:${mtime}:${first_line_hash}"
    else
        echo "0:0:0:"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω
is_file_rotated() {
    local current_metadata="$1"
    local saved_metadata="$2"
    
    # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: —Ä–∞–∑–º–µ—Ä:–≤—Ä–µ–º—è_—Å–æ–∑–¥–∞–Ω–∏—è:–≤—Ä–µ–º—è_–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:—Ö–µ—à_–ø–µ—Ä–≤–æ–π_—Å—Ç—Ä–æ–∫–∏
    IFS=':' read -r curr_size curr_ctime curr_mtime curr_hash <<< "$current_metadata"
    IFS=':' read -r saved_size saved_ctime saved_mtime saved_hash <<< "$saved_metadata"
    
    # –§–∞–π–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω –µ—Å–ª–∏:
    # 1. –•–µ—à –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ñ–∞–π–ª –∑–∞–º–µ–Ω–µ–Ω)
    # 2. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ (—Ñ–∞–π–ª —É—Å–µ—á–µ–Ω/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω)
    # 3. –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (—Ñ–∞–π–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏)
    # 4. –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–µ–µ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
    
    if [[ -n "$saved_hash" && -n "$curr_hash" && "$curr_hash" != "$saved_hash" ]]; then
        log_action "ROTATION DETECTED: First line hash changed ($saved_hash -> $curr_hash)"
        return 0
    fi
    
    if [[ "$curr_size" -lt "$saved_size" ]]; then
        log_action "ROTATION DETECTED: File size decreased ($saved_size -> $curr_size)"
        return 0
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (inode change time)
    if [[ -n "$saved_ctime" && -n "$curr_ctime" && "$curr_ctime" != "$saved_ctime" ]]; then
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ò –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–µ —Å—Ç–∞—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        # —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —Ñ–∞–π–ª –±—ã–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω
        if [[ "$curr_ctime" -gt "$saved_mtime" ]]; then
            log_action "ROTATION DETECTED: File creation time changed ($saved_ctime -> $curr_ctime)"
            return 0
        fi
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    # —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    if [[ -n "$curr_ctime" && -n "$curr_mtime" && "$curr_ctime" -gt "$curr_mtime" ]]; then
        local time_diff=$((curr_ctime - curr_mtime))
        # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥, –≤–µ—Ä–æ—è—Ç–Ω–æ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ
        if [[ "$time_diff" -gt 60 ]]; then
            log_action "ROTATION DETECTED: Creation time > modification time (diff: ${time_diff}s)"
            return 0
        fi
    fi
    
    return 1
}

send_telegram() {
    local message="$1"
    local priority="${2:-normal}"
    
    if [[ -z "$TELEGRAM_BOT_TOKEN" ]] || [[ -z "$TELEGRAM_CHAT_ID" ]]; then
        log_action "TELEGRAM_NOT_CONFIGURED: $message"
        return 1
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    case "$priority" in
        "critical") message="üö® –ö–†–ò–¢–ò–ß–ù–û: $message" ;;
        "warning") message="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: $message" ;;
        "info") message="‚ÑπÔ∏è –ò–ù–§–û: $message" ;;
        *) message="üìä $message" ;;
    esac
    
    local hostname=$(hostname)
    local full_message="[$hostname] $message"
    
    if curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=$full_message" \
        -d "parse_mode=HTML" >/dev/null 2>&1; then
        log_action "TELEGRAM_SENT: $message"
        return 0
    else
        log_action "TELEGRAM_FAILED: $message"
        return 1
    fi
}

is_throttled() {
    local event_type="$1"
    local throttle_minutes="${2:-5}"
    local current_time=$(date +%s)
    
    # –ß–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    local last_sent=$(grep "^$event_type:" "$THROTTLE_FILE" 2>/dev/null | cut -d: -f2)
    
    if [[ -n "$last_sent" ]] && (( current_time - last_sent < throttle_minutes * 60 )); then
        return 0  # throttled
    else
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        grep -v "^$event_type:" "$THROTTLE_FILE" > "$THROTTLE_FILE.tmp" 2>/dev/null || touch "$THROTTLE_FILE.tmp"
        echo "$event_type:$current_time" >> "$THROTTLE_FILE.tmp"
        mv "$THROTTLE_FILE.tmp" "$THROTTLE_FILE"
        return 1  # not throttled
    fi
}

restart_container() {
    local name="$1"
    if docker restart "$name" >/dev/null 2>&1; then
        log_action "RESTARTED: container $name"
        send_telegram "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $name –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" "warning"
        return 0
    else
        log_action "RESTART_FAILED: container $name"
        send_telegram "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $name" "critical"
        return 1
    fi
}

restart_interface() {
    local iface="$1"
    local throttle_key="IFACE_RESTART_$iface"
    
    if is_throttled "$throttle_key" 5; then
        log_action "THROTTLED: $iface restart skipped (< 5 min)"
        return 1
    fi
    
    if ip link set "$iface" down && sleep 2 && ip link set "$iface" up; then
        log_action "RESTARTED: interface $iface"
        send_telegram "–°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å $iface –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" "warning"
        return 0
    else
        log_action "RESTART_FAILED: interface $iface"
        send_telegram "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å $iface" "critical"
        return 1
    fi
}

process_failure() {
    local line="$1"
    local event_type
    local message
    local priority="warning"
    local should_throttle=false
    local throttle_minutes=5
    
    case "$line" in
        *"NO_INTERNET"*)
            event_type="NO_INTERNET"
            message="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            should_throttle=true
            throttle_minutes=10
            ;;
        *"GATEWAY_DOWN"*)
            event_type="GATEWAY_DOWN"
            message="–®–ª—é–∑ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            should_throttle=true
            throttle_minutes=10
            ;;
        *"DOCKER_DAEMON_DOWN"*)
            event_type="DOCKER_DAEMON_DOWN"
            message="Docker daemon –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            priority="critical"
            should_throttle=true
            throttle_minutes=15
            ;;
        *"HA_DOWN"*)
            event_type="HA_DOWN"
            message="Home Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            priority="critical"
            ;;
        *"CONTAINER_DOWN:"*)
            local name=$(echo "$line" | sed 's/.*CONTAINER_DOWN://' | cut -d' ' -f1)
            event_type="CONTAINER_DOWN_$name"
            restart_container "$name"
            return
            ;;
        *"IFACE_DOWN:"*)
            local iface=$(echo "$line" | sed 's/.*IFACE_DOWN://' | cut -d' ' -f1)
            event_type="IFACE_DOWN_$iface"
            # –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Å–æ–∑–¥–∞–µ—Ç –º–Ω–æ–≥–æ —à—É–º–∞
            if [[ "$iface" == "wlan0" ]]; then
                log_action "IGNORED: $iface down (auto-restart disabled)"
                return
            else
                restart_interface "$iface"
                return
            fi
            ;;
        *"LOW_MEMORY:"*)
            local mem=$(echo "$line" | sed 's/.*LOW_MEMORY://' | cut -d' ' -f1)
            event_type="LOW_MEMORY"
            message="–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏: $mem"
            priority="critical"
            should_throttle=true
            throttle_minutes=60
            ;;
        *"LOW_DISK:"*)
            local disk=$(echo "$line" | sed 's/.*LOW_DISK://' | cut -d' ' -f1)
            event_type="LOW_DISK"
            message="–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: $disk"
            priority="critical"
            should_throttle=true
            throttle_minutes=60
            ;;
        *"HIGH_TEMP:"*)
            local temp=$(echo "$line" | sed 's/.*HIGH_TEMP://' | cut -d' ' -f1)
            event_type="HIGH_TEMP"
            message="–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: $temp"
            priority="critical"
            should_throttle=true
            throttle_minutes=15
            ;;
        *"HA_SERVICE_DOWN"*)
            event_type="HA_SERVICE_DOWN"
            message="–°–µ—Ä–≤–∏—Å Home Assistant –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8123"
            priority="critical"
            ;;
        *"NODERED_SERVICE_DOWN"*)
            event_type="NODERED_SERVICE_DOWN"
            message="–°–µ—Ä–≤–∏—Å Node-RED –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 1880"
            ;;
        *"HIGH_LOAD:"*)
            local load=$(echo "$line" | sed 's/.*HIGH_LOAD://' | cut -d' ' -f1)
            event_type="HIGH_LOAD"
            message="–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É: $load"
            should_throttle=true
            throttle_minutes=10
            ;;
        *"SSH_DOWN:"*)
            event_type="SSH_DOWN"
            message="SSH —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            priority="critical"
            should_throttle=true
            throttle_minutes=15
            ;;
        *"TAILSCALE_DAEMON_DOWN"*)
            event_type="TAILSCALE_DAEMON"
            message="Tailscale –¥–µ–º–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            priority="critical"
            should_throttle=true
            throttle_minutes=15
            ;;
        *"TAILSCALE_VPN_DOWN"*)
            event_type="TAILSCALE_VPN"
            message="Tailscale VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            priority="critical"
            should_throttle=true
            throttle_minutes=15
            ;;
        *"TAILSCALE_FUNNEL_DOWN"*)
            event_type="TAILSCALE_FUNNEL"
            message="Tailscale Funnel —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            priority="warning"
            should_throttle=true
            throttle_minutes=20
            ;;
        *"HA_DATABASE_"*)
            event_type="HA_DATABASE"
            message="–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Home Assistant"
            priority="critical"
            should_throttle=true
            throttle_minutes=60
            ;;
        *"HIGH_SWAP_USAGE:"*)
            local swap=$(echo "$line" | sed 's/.*HIGH_SWAP_USAGE://' | cut -d' ' -f1)
            event_type="HIGH_SWAP"
            message="–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ swap: $swap"
            priority="warning"
            should_throttle=true
            throttle_minutes=30
            ;;
        *"WEAK_WIFI_SIGNAL:"*)
            local signal=$(echo "$line" | sed 's/.*WEAK_WIFI_SIGNAL://' | cut -d' ' -f1)
            event_type="WEAK_WIFI"
            message="–°–ª–∞–±—ã–π WiFi —Å–∏–≥–Ω–∞–ª: $signal"
            should_throttle=true
            throttle_minutes=60
            ;;
        *"UNDERVOLTAGE_DETECTED"*)
            event_type="UNDERVOLTAGE"
            message="–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è"
            priority="critical"
            should_throttle=true
            throttle_minutes=30
            ;;
        *"CPU_THROTTLED"*)
            event_type="CPU_THROTTLED"
            message="CPU —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –∏–∑-–∑–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã/–ø–∏—Ç–∞–Ω–∏—è"
            priority="critical"
            should_throttle=true
            throttle_minutes=20
            ;;
        *"NTP_NOT_SYNCED"*)
            event_type="NTP_SYNC"
            message="–í—Ä–µ–º—è –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ NTP"
            should_throttle=true
            throttle_minutes=120
            ;;
        *"LOG_OVERSIZED:"*)
            event_type="LOG_OVERSIZED"
            message="–õ–æ–≥ —Ñ–∞–π–ª –ø—Ä–µ–≤—ã—Å–∏–ª –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä"
            should_throttle=true
            throttle_minutes=240
            ;;
        *"SD_CARD_ERRORS"*)
            event_type="SD_CARD_ERRORS"
            message="–û—à–∏–±–∫–∏ SD –∫–∞—Ä—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
            priority="critical"
            should_throttle=true
            throttle_minutes=60
            ;;
        *)
            event_type="UNKNOWN"
            message="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: $line"
            ;;
    esac
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º throttling
    if [[ "$should_throttle" == true ]] && is_throttled "$event_type" "$throttle_minutes"; then
        log_action "THROTTLED: $event_type (< $throttle_minutes min)"
        return
    fi
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    send_telegram "$message" "$priority"
    log_action "PROCESSED: $event_type - $message"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
main() {
    log_action "Starting failure processing..."
    
    if [[ ! -f "$LOG_FILE" ]]; then
        log_action "Failure log file not found: $LOG_FILE"
        return 1
    fi
    
    local total_lines=$(wc -l < "$LOG_FILE")
    local last_position=$(cat "$POSITION_FILE" 2>/dev/null || echo "0")
    local current_metadata=$(get_file_metadata "$LOG_FILE")
    local saved_metadata=$(cat "$METADATA_FILE" 2>/dev/null || echo "")
    local processed_lines=0
    
    log_action "Log file has $total_lines lines, last position: $last_position"
    log_action "Current metadata: $current_metadata"
    log_action "Saved metadata: $saved_metadata"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω
    local file_rotated=false
    if [[ -n "$saved_metadata" ]] && is_file_rotated "$current_metadata" "$saved_metadata"; then
        file_rotated=true
        last_position=0
        log_action "File rotation detected, starting from beginning"
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
    if (( last_position > total_lines )); then
        log_action "Position $last_position > total lines $total_lines, resetting position"
        last_position=0
        file_rotated=true
    fi
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (( total_lines > last_position )); then
        local lines_to_process=$((total_lines - last_position))
        log_action "Processing $lines_to_process new lines (from $((last_position + 1)) to $total_lines)"
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω –∏ —É –Ω–∞—Å –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫, –ª–∏–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        # —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if [[ "$file_rotated" == true ]] && (( lines_to_process > 50 )); then
            log_action "File rotated with $lines_to_process lines, processing only last 50 to avoid spam"
            last_position=$((total_lines - 50))
            lines_to_process=50
        fi
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tail –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        tail -n "+$((last_position + 1))" "$LOG_FILE" | head -n "$lines_to_process" | while IFS= read -r line; do
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
            [[ -z "$line" || "$line" != *" "* ]] && continue
            
            process_failure "$line"
            ((processed_lines++))
        done
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        echo "$total_lines" > "$POSITION_FILE"
        echo "$current_metadata" > "$METADATA_FILE"
        log_action "Updated position to $total_lines, processed $lines_to_process new failure(s)"
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if [[ "$file_rotated" == true ]]; then
            send_telegram "–õ–æ–≥ —Ñ–∞–π–ª –±—ã–ª —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è" "info"
        fi
    else
        log_action "No new failures to process"
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
        echo "$current_metadata" > "$METADATA_FILE"
    fi
}

main "$@"
