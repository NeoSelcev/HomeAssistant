#!/bin/bash

# HA System Health Check - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Home Assistant –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# üöÄ –°–£–ü–ï–† –ö–†–£–¢–ê–Ø –í–ï–†–°–ò–Ø —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π!

VERSION="2.0"
SCRIPT_NAME="HA System Health Check –°–£–ü–ï–† –í–ï–†–°–ò–Ø"
LOG_FILE="/var/log/ha-health-check.log"
REPORT_FILE="/tmp/ha-health-report-$(date +%Y%m%d-%H%M%S).txt"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNING_CHECKS=0

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%F %T') [HEALTH-CHECK] $1" | tee -a "$LOG_FILE"
}

print_header() {
    local title="$1"
    echo -e "\n${BLUE}================================================================${NC}"
    echo -e "${BLUE}  $title${NC}"
    echo -e "${BLUE}================================================================${NC}"
}

print_section() {
    local section="$1"
    echo -e "\n${CYAN}--- $section ---${NC}"
}

check_result() {
    local test_name="$1"
    local result="$2"
    local details="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    case "$result" in
        "PASS")
            echo -e "[${GREEN}‚úì PASS${NC}] $test_name"
            [[ -n "$details" ]] && echo -e "         ${details}"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
            ;;
        "FAIL")
            echo -e "[${RED}‚úó FAIL${NC}] $test_name"
            [[ -n "$details" ]] && echo -e "         ${RED}$details${NC}"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            ;;
        "WARN")
            echo -e "[${YELLOW}‚ö† WARN${NC}] $test_name"
            [[ -n "$details" ]] && echo -e "         ${YELLOW}$details${NC}"
            WARNING_CHECKS=$((WARNING_CHECKS + 1))
            ;;
    esac
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Ç—á–µ—Ç
    echo "[$result] $test_name" >> "$REPORT_FILE"
    [[ -n "$details" ]] && echo "    $details" >> "$REPORT_FILE"
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
check_basic_system_info() {
    print_section "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    check_result "Hostname" "PASS" "$(hostname)"
    check_result "Uptime" "PASS" "$(uptime -p)"
    check_result "Kernel" "PASS" "$(uname -r)"
    check_result "OS" "PASS" "$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
    check_result "Architecture" "PASS" "$(uname -m)"
    
    # CPU Info
    local cpu_model=$(cat /proc/cpuinfo | grep "model name" | head -1 | cut -d':' -f2 | xargs)
    check_result "CPU Model" "PASS" "$cpu_model"
    
    # CPU Cores
    local cpu_cores=$(nproc)
    check_result "CPU Cores" "PASS" "$cpu_cores"
}

check_system_resources() {
    print_section "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    local mem_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
    local mem_info=$(free -h | grep Mem:)
    local mem_total=$(echo $mem_info | awk '{print $2}')
    local mem_used=$(echo $mem_info | awk '{print $3}')
    local mem_available=$(echo $mem_info | awk '{print $7}')
    local mem_available_mb=$(free -m | awk '/Mem:/ {print $7}')
    
    check_result "Memory Total" "PASS" "$mem_total"
    check_result "Memory Used" "PASS" "$mem_used"
    
    if [[ $mem_available_mb -lt 100 ]]; then
        check_result "Memory Available" "FAIL" "$mem_available (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ!)"
    elif [[ $mem_available_mb -lt 200 ]]; then
        check_result "Memory Available" "WARN" "$mem_available (–º–∞–ª–æ)"
    else
        check_result "Memory Available" "PASS" "$mem_available"
    fi
    
    if (( $(echo "$mem_usage > 85" | bc -l) )); then
        check_result "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏" "WARN" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${mem_usage}% (>85%)"
    elif (( $(echo "$mem_usage > 95" | bc -l) )); then
        check_result "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏" "FAIL" "–ö—Ä–∏—Ç–∏—á–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${mem_usage}%"
    else
        check_result "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏" "PASS" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${mem_usage}%"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
    local disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    local disk_info=$(df -h / | tail -1)
    local disk_size=$(echo $disk_info | awk '{print $2}')
    local disk_used=$(echo $disk_info | awk '{print $3}')
    local disk_available=$(echo $disk_info | awk '{print $4}')
    
    check_result "Disk Size" "PASS" "$disk_size"
    check_result "Disk Used" "PASS" "$disk_used"
    
    if [[ "$disk_usage" -gt 90 ]]; then
        check_result "Disk Available" "FAIL" "$disk_available (${disk_usage}% used - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ!)"
    elif [[ "$disk_usage" -gt 80 ]]; then
        check_result "Disk Available" "WARN" "$disk_available (${disk_usage}% used - –º–∞–ª–æ)"
    else
        check_result "Disk Available" "PASS" "$disk_available (${disk_usage}% used)"
    fi
    
    if [[ "$disk_usage" -gt 85 ]]; then
        check_result "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ /" "WARN" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${disk_usage}% (>85%)"
    elif [[ "$disk_usage" -gt 95 ]]; then
        check_result "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ /" "FAIL" "–ö—Ä–∏—Ç–∏—á–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${disk_usage}%"
    else
        check_result "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ /" "PASS" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${disk_usage}%"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local cpu_cores=$(nproc)
    local load_ratio=$(echo "scale=2; $load_avg / $cpu_cores" | bc)
    
    if (( $(echo "$load_avg > 2.0" | bc -l) )); then
        check_result "Load Average" "WARN" "$load_avg (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
    else
        check_result "Load Average" "PASS" "$load_avg"
    fi
    
    if (( $(echo "$load_ratio > 1.5" | bc -l) )); then
        check_result "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã" "WARN" "Load Average: $load_avg (${load_ratio}x –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–¥–µ—Ä)"
    elif (( $(echo "$load_ratio > 2.0" | bc -l) )); then
        check_result "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã" "FAIL" "–ö—Ä–∏—Ç–∏—á–Ω–æ –≤—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: $load_avg"
    else
        check_result "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã" "PASS" "Load Average: $load_avg"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–¥–ª—è Raspberry Pi)
    if [[ -f /sys/class/thermal/thermal_zone0/temp ]]; then
        local temp=$(cat /sys/class/thermal/thermal_zone0/temp | awk '{print $1/1000}')
        if (( $(echo "$temp > 70" | bc -l) )); then
            check_result "Temperature" "WARN" "${temp}¬∞C (–≤—ã—Å–æ–∫–∞—è!)"
        elif (( $(echo "$temp > 60" | bc -l) )); then
            check_result "Temperature" "WARN" "${temp}¬∞C (–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è)"
        else
            check_result "Temperature" "PASS" "${temp}¬∞C"
        fi
    elif command -v vcgencmd >/dev/null 2>&1; then
        local temp=$(vcgencmd measure_temp | cut -d= -f2 | cut -d"'" -f1)
        if (( $(echo "$temp > 70" | bc -l) )); then
            check_result "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU" "WARN" "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C (>70¬∞C)"
        elif (( $(echo "$temp > 80" | bc -l) )); then
            check_result "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU" "FAIL" "–ö—Ä–∏—Ç–∏—á–Ω–æ –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C"
        else
            check_result "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU" "PASS" "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø—Ç–∞–π–º–∞
    local uptime_seconds=$(awk '{print int($1)}' /proc/uptime)
    local uptime_days=$((uptime_seconds / 86400))
    local uptime_hours=$(((uptime_seconds % 86400) / 3600))
    check_result "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã" "PASS" "${uptime_days} –¥–Ω–µ–π, ${uptime_hours} —á–∞—Å–æ–≤"
}

check_network_connectivity() {
    print_section "–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    local interfaces=$(ip -o link show | awk -F': ' '{print $2}' | grep -v lo)
    check_result "Network Interfaces" "PASS" "$interfaces"
    
    # Check specific interface status
    if ip link show wlan0 &>/dev/null; then
        if ip link show wlan0 | grep -q "state UP"; then
            check_result "WiFi (wlan0)" "PASS" "UP"
        else
            check_result "WiFi (wlan0)" "FAIL" "DOWN"
        fi
    fi
    
    if ip link show eth0 &>/dev/null; then
        if ip link show eth0 | grep -q "state UP"; then
            check_result "Ethernet (eth0)" "PASS" "UP"
        else
            check_result "Ethernet (eth0)" "WARN" "DOWN"
        fi
    fi
    
    # IP addresses
    local ips=$(ip addr show | grep -E "inet.*global" | awk '{print $2, $NF}')
    if [[ -n "$ips" ]]; then
        check_result "IP Addresses" "PASS" "–ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ IP"
        echo "$ips" | while read line; do
            echo -e "         $line"
        done
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    local active_interfaces=$(ip link show | grep "state UP" | awk -F: '{print $2}' | tr -d ' ')
    if [[ -n "$active_interfaces" ]]; then
        check_result "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã" "PASS" "–ê–∫—Ç–∏–≤–Ω—ã–µ: $(echo $active_interfaces | tr '\n' ' ')"
    else
        check_result "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã" "FAIL" "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–ª—é–∑–∞
    local gateway=$(ip route | grep default | awk '{print $3}' | head -1)
    if [[ -n "$gateway" ]] && ping -c 1 -W 3 "$gateway" >/dev/null 2>&1; then
        check_result "–õ–æ–∫–∞–ª—å–Ω—ã–π —à–ª—é–∑" "PASS" "–ü–∏–Ω–≥ –¥–æ $gateway —É—Å–ø–µ—à–µ–Ω"
        check_result "Gateway" "PASS" "$gateway - Reachable"
    else
        check_result "–õ–æ–∫–∞–ª—å–Ω—ã–π —à–ª—é–∑" "FAIL" "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —à–ª—é–∑—É $gateway"
        check_result "Gateway" "FAIL" "$gateway - Unreachable"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        check_result "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" "PASS" "–ü–∏–Ω–≥ –¥–æ 8.8.8.8 —É—Å–ø–µ—à–µ–Ω"
        check_result "Internet" "PASS" "Available"
    else
        check_result "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" "FAIL" "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
        check_result "Internet" "FAIL" "Unavailable"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
    if nslookup google.com >/dev/null 2>&1; then
        check_result "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" "PASS" "DNS —Ä–∞–±–æ—Ç–∞–µ—Ç"
        check_result "DNS" "PASS" "Working"
    else
        check_result "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ" "FAIL" "DNS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        check_result "DNS" "FAIL" "Issues detected"
    fi
}

check_docker_services() {
    print_section "Docker –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon
    if ! command -v docker >/dev/null 2>&1; then
        check_result "Docker" "FAIL" "Not installed"
        return
    fi
    
    check_result "Docker Version" "PASS" "$(docker --version)"
    
    if systemctl is-active docker >/dev/null 2>&1; then
        check_result "Docker daemon" "PASS" "–°–ª—É–∂–±–∞ –∞–∫—Ç–∏–≤–Ω–∞"
        check_result "Docker Daemon" "PASS" "Running"
    else
        check_result "Docker daemon" "FAIL" "–°–ª—É–∂–±–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        check_result "Docker Daemon" "FAIL" "Not running"
        return
    fi
    
    # Docker info
    if docker info >/dev/null 2>&1; then
        check_result "Docker Info" "PASS" "Accessible"
    else
        check_result "Docker Info" "FAIL" "Cannot access daemon"
        return
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose —Ñ–∞–π–ª–∞
    if [[ -f "/srv/home/docker-compose.yml" ]]; then
        check_result "Docker Compose —Ñ–∞–π–ª" "PASS" "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: /srv/home/docker-compose.yml"
        check_result "Docker Compose Configuration" "PASS" "Found"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker compose –∫–æ–º–∞–Ω–¥
        cd /srv/home 2>/dev/null
        if docker compose ps >/dev/null 2>&1; then
            check_result "Docker Compose" "PASS" "Working"
        else
            check_result "Docker Compose" "WARN" "Issues detected"
        fi
    else
        check_result "Docker Compose —Ñ–∞–π–ª" "FAIL" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: /srv/home/docker-compose.yml"
        check_result "Docker Compose Configuration" "FAIL" "Not found"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local containers=$(docker ps --format "table {{.Names}}\t{{.Status}}" 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        local running_containers=$(docker ps -q | wc -l)
        if [[ "$running_containers" -gt 0 ]]; then
            check_result "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã" "PASS" "$running_containers –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ"
            echo -e "         ${containers}"
        else
            check_result "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã" "WARN" "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        fi
    else
        check_result "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã" "FAIL" "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    local services=("homeassistant" "nodered" "portainer" "zigbee2mqtt")
    for service in "${services[@]}"; do
        if docker ps --format "{{.Names}}" | grep -q "^${service}$"; then
            local status=$(docker ps --format "{{.Names}}\t{{.Status}}" | grep "^${service}" | cut -f2)
            check_result "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service" "PASS" "$status"
        else
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker inspect –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if docker inspect "$service" >/dev/null 2>&1; then
                local container_status=$(docker inspect -f '{{.State.Status}}' "$service")
                local running=$(docker inspect -f '{{.State.Running}}' "$service")
                
                if [[ "$running" == "true" ]]; then
                    check_result "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service" "PASS" "Running"
                else
                    check_result "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service" "FAIL" "$container_status"
                fi
            else
                check_result "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service" "WARN" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            fi
        fi
    done
}

check_ha_monitoring_services() {
    print_section "HA –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å—ã"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
    local services=("ha-watchdog" "ha-failure-notifier")
    
    for service in "${services[@]}"; do
        if systemctl is-active "${service}.service" >/dev/null 2>&1; then
            local status=$(systemctl show "${service}.service" --property=SubState --value)
            check_result "–°–µ—Ä–≤–∏—Å $service" "PASS" "–°—Ç–∞—Ç—É—Å: $status"
        else
            check_result "–°–µ—Ä–≤–∏—Å $service" "FAIL" "–°–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ timer'–æ–≤
        if systemctl is-active "${service}.timer" >/dev/null 2>&1; then
            local next_run=$(systemctl show "${service}.timer" --property=NextElapseUSecRealtime --value)
            if [[ "$next_run" != "0" ]]; then
                check_result "Timer $service" "PASS" "Timer –∞–∫—Ç–∏–≤–µ–Ω"
            else
                check_result "Timer $service" "WARN" "Timer –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
            fi
        else
            check_result "Timer $service" "FAIL" "Timer –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    local scripts=("/opt/ha-monitoring/scripts/ha-watchdog.sh" "/opt/ha-monitoring/scripts/ha-failure-notifier.sh")
    
    for script in "${scripts[@]}"; do
        if [[ -f "$script" ]]; then
            if [[ -x "$script" ]]; then
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                if bash -n "$script" 2>/dev/null; then
                    check_result "–°–∫—Ä–∏–ø—Ç $(basename $script)" "PASS" "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
                else
                    check_result "–°–∫—Ä–∏–ø—Ç $(basename $script)" "FAIL" "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"
                fi
            else
                check_result "–°–∫—Ä–∏–ø—Ç $(basename $script)" "WARN" "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π"
            fi
        else
            check_result "–°–∫—Ä–∏–ø—Ç $(basename $script)" "FAIL" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
}

check_log_files() {
    print_section "–õ–æ–≥ —Ñ–∞–π–ª—ã –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    
    local log_files=(
        "/var/log/ha-failures.log"
        "/var/log/ha-failure-notifier.log" 
        "/var/log/ha-watchdog.log"
    )
    
    for log_file in "${log_files[@]}"; do
        if [[ -f "$log_file" ]]; then
            local size=$(stat -c%s "$log_file" 2>/dev/null || echo "0")
            local size_mb=$((size / 1024 / 1024))
            local age=$(find "$log_file" -mtime +1 2>/dev/null)
            
            if [[ "$size_mb" -gt 100 ]]; then
                check_result "–õ–æ–≥ $(basename $log_file)" "WARN" "–†–∞–∑–º–µ—Ä: ${size_mb}MB (>100MB)"
            elif [[ "$size_mb" -gt 500 ]]; then
                check_result "–õ–æ–≥ $(basename $log_file)" "FAIL" "–ö—Ä–∏—Ç–∏—á–Ω–æ –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä: ${size_mb}MB"
            else
                check_result "–õ–æ–≥ $(basename $log_file)" "PASS" "–†–∞–∑–º–µ—Ä: ${size_mb}MB"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            local recent_entries=$(tail -n 50 "$log_file" 2>/dev/null | grep "$(date +%Y-%m-%d)" | wc -l)
            if [[ "$recent_entries" -gt 0 ]]; then
                echo -e "         –ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è: $recent_entries"
            else
                echo -e "         ${YELLOW}–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è${NC}"
            fi
        else
            check_result "–õ–æ–≥ $(basename $log_file)" "FAIL" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    local monitoring_files=(
        "/var/lib/ha-failure-notifier/last_timestamp.txt"
        "/var/lib/ha-failure-notifier/throttle.txt"
        "/var/lib/ha-failure-notifier/metadata.txt"
    )
    
    print_section "–§–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    for file in "${monitoring_files[@]}"; do
        if [[ -f "$file" ]]; then
            local content=$(head -1 "$file" 2>/dev/null)
            check_result "–§–∞–π–ª $(basename $file)" "PASS" "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: $content"
        else
            check_result "–§–∞–π–ª $(basename $file)" "WARN" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"
        fi
    done
}

check_tailscale_vpn() {
    print_section "Tailscale VPN"
    
    if ! command -v tailscale >/dev/null 2>&1; then
        check_result "Tailscale" "WARN" "Not installed"
        return
    fi
    
    check_result "Tailscale Version" "PASS" "$(tailscale version | head -1)"
    
    # Tailscale daemon status
    if systemctl is-active tailscaled >/dev/null 2>&1; then
        check_result "Tailscaled Daemon" "PASS" "Running"
    else
        check_result "Tailscaled Daemon" "FAIL" "Not running"
        return
    fi
    
    # Tailscale status
    local ts_status=$(tailscale status --json 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        local backend_state=$(echo "$ts_status" | jq -r '.BackendState' 2>/dev/null)
        case "$backend_state" in
            "Running")
                check_result "Tailscale Status" "PASS" "Connected"
                ;;
            "NeedsLogin")
                check_result "Tailscale Status" "WARN" "Needs authentication"
                ;;
            "NoState"|"Stopped")
                check_result "Tailscale Status" "FAIL" "Not connected"
                ;;
            *)
                check_result "Tailscale Status" "WARN" "$backend_state"
                ;;
        esac
        
        # Get current node info
        local self_info=$(echo "$ts_status" | jq -r '.Self // empty' 2>/dev/null)
        if [[ -n "$self_info" ]] && [[ "$self_info" != "null" ]]; then
            local hostname=$(echo "$self_info" | jq -r '.HostName // "unknown"' 2>/dev/null)
            local tailscale_ip=$(echo "$self_info" | jq -r '.TailscaleIPs[0] // "unknown"' 2>/dev/null)
            local online=$(echo "$self_info" | jq -r '.Online // false' 2>/dev/null)
            
            check_result "Tailscale Hostname" "PASS" "$hostname"
            check_result "Tailscale IP" "PASS" "$tailscale_ip"
            
            if [[ "$online" == "true" ]]; then
                check_result "Node Status" "PASS" "Online"
            else
                check_result "Node Status" "WARN" "Offline"
            fi
            
            # Check if Home Assistant is accessible via Tailscale
            if [[ -n "$tailscale_ip" ]] && [[ "$tailscale_ip" != "unknown" ]]; then
                if timeout 3 bash -c "</dev/tcp/$tailscale_ip/8123" 2>/dev/null; then
                    check_result "HA via Tailscale" "PASS" "$tailscale_ip:8123 - Accessible"
                else
                    check_result "HA via Tailscale" "WARN" "$tailscale_ip:8123 - Not accessible"
                fi
            fi
        fi
        
        # Count peers
        local peer_count=$(echo "$ts_status" | jq '.Peer | length' 2>/dev/null)
        if [[ -n "$peer_count" ]] && [[ "$peer_count" != "null" ]]; then
            check_result "Connected Peers" "PASS" "$peer_count"
        fi
    else
        check_result "Tailscale Status" "WARN" "Cannot retrieve status"
    fi
    
    # Check Tailscale services
    if systemctl is-active tailscale-serve-ha >/dev/null 2>&1; then
        check_result "Tailscale Serve HA" "PASS" "Active"
    else
        check_result "Tailscale Serve HA" "WARN" "Inactive"
    fi
    
    if systemctl is-active tailscale-funnel-ha >/dev/null 2>&1; then
        check_result "Tailscale Funnel HA" "PASS" "Active"
    else
        check_result "Tailscale Funnel HA" "WARN" "Inactive"
    fi
}

check_ha_services_availability() {
    print_section "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HA —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ /dev/tcp (–∫–∞–∫ –≤ watchdog)
    check_tcp_port() {
        local host="$1"
        local port="$2"
        timeout 5 bash -c "</dev/tcp/$host/$port" 2>/dev/null
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Home Assistant
    local ha_ports=("8123")
    for port in "${ha_ports[@]}"; do
        if check_tcp_port "localhost" "$port"; then
            check_result "Home Assistant (–ø–æ—Ä—Ç $port)" "PASS" "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç"
        else
            check_result "Home Assistant (–ø–æ—Ä—Ç $port)" "FAIL" "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node-RED
    if check_tcp_port "localhost" "1880"; then
        check_result "Node-RED (–ø–æ—Ä—Ç 1880)" "PASS" "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        check_result "Node-RED (–ø–æ—Ä—Ç 1880)" "WARN" "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Portainer
    if check_tcp_port "localhost" "9000"; then
        check_result "Portainer (–ø–æ—Ä—Ç 9000)" "PASS" "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        check_result "Portainer (–ø–æ—Ä—Ç 9000)" "WARN" "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Zigbee2MQTT
    if check_tcp_port "localhost" "8080"; then
        check_result "Zigbee2MQTT (–ø–æ—Ä—Ç 8080)" "PASS" "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        check_result "Zigbee2MQTT (–ø–æ—Ä—Ç 8080)" "WARN" "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

check_recent_failures() {
    print_section "–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–±–æ–µ–≤"
    
    local failure_log="/var/log/ha-failures.log"
    if [[ -f "$failure_log" ]]; then
        local today=$(date +%Y-%m-%d)
        local failures_today=$(grep "$today" "$failure_log" 2>/dev/null | wc -l)
        
        if [[ "$failures_today" -eq 0 ]]; then
            check_result "–°–±–æ–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è" "PASS" "–°–±–æ–µ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        elif [[ "$failures_today" -lt 10 ]]; then
            check_result "–°–±–æ–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è" "WARN" "$failures_today —Å–±–æ–µ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        else
            check_result "–°–±–æ–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è" "FAIL" "–ú–Ω–æ–≥–æ —Å–±–æ–µ–≤: $failures_today"
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–±–æ–µ–≤
        local recent_failures=$(tail -n 5 "$failure_log" 2>/dev/null)
        if [[ -n "$recent_failures" ]]; then
            echo -e "         ${CYAN}–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:${NC}"
            echo "$recent_failures" | while read line; do
                echo -e "         $line"
            done
        fi
    else
        check_result "–õ–æ–≥ —Å–±–æ–µ–≤" "WARN" "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    local notifier_log="/var/log/ha-failure-notifier.log"
    if [[ -f "$notifier_log" ]]; then
        local recent_notifications=$(grep "$(date +%Y-%m-%d)" "$notifier_log" 2>/dev/null | grep "TELEGRAM_SENT" | wc -l)
        local recent_throttled=$(grep "$(date +%Y-%m-%d)" "$notifier_log" 2>/dev/null | grep "THROTTLED" | wc -l)
        
        echo -e "         –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: $recent_notifications"
        echo -e "         –°–æ–±—ã—Ç–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º: $recent_throttled"
    fi
}

check_system_security() {
    print_section "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
    if systemctl is-active ssh >/dev/null 2>&1; then
        check_result "SSH —Å–µ—Ä–≤–∏—Å" "PASS" "–°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω"
    else
        check_result "SSH —Å–µ—Ä–≤–∏—Å" "WARN" "SSH —Å–µ—Ä–≤–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    fi
    
    # SSH configuration
    if [[ -f /etc/ssh/sshd_config ]]; then
        local ssh_port=$(grep "^Port" /etc/ssh/sshd_config | awk '{print $2}')
        if [[ -n "$ssh_port" && "$ssh_port" != "22" ]]; then
            check_result "SSH Port" "PASS" "Changed ($ssh_port)"
        else
            check_result "SSH Port" "WARN" "Default (22)"
        fi
        
        if grep -q "PasswordAuthentication no" /etc/ssh/sshd_config; then
            check_result "SSH Password Auth" "PASS" "Disabled"
        else
            check_result "SSH Password Auth" "WARN" "Enabled"
        fi
        
        if grep -q "PermitRootLogin" /etc/ssh/sshd_config; then
            local root_login=$(grep "PermitRootLogin" /etc/ssh/sshd_config | awk '{print $2}')
            if [[ "$root_login" == "yes" ]]; then
                check_result "SSH Root Login" "WARN" "Enabled"
            else
                check_result "SSH Root Login" "PASS" "$root_login"
            fi
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ firewall
    if command -v ufw >/dev/null 2>&1; then
        local ufw_status=$(ufw status | head -1)
        if echo "$ufw_status" | grep -q "active"; then
            check_result "Firewall (UFW)" "PASS" "–ê–∫—Ç–∏–≤–µ–Ω"
        else
            check_result "Firewall (UFW)" "WARN" "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        fi
    else
        check_result "Firewall (UFW)" "WARN" "Not installed"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ fail2ban
    if systemctl is-active fail2ban >/dev/null 2>&1; then
        check_result "Fail2ban" "PASS" "–°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω"
    else
        check_result "Fail2ban" "WARN" "–°–µ—Ä–≤–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    fi
    
    # File permissions for monitoring configs
    if [[ -f /etc/ha-watchdog/config ]]; then
        local perms=$(stat -c %a /etc/ha-watchdog/config)
        if [[ "$perms" == "600" ]] || [[ "$perms" == "640" ]]; then
            check_result "Config File Permissions" "PASS" "Secure ($perms)"
        else
            check_result "Config File Permissions" "WARN" "Insecure ($perms)"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if command -v apt >/dev/null 2>&1; then
        local security_updates=$(apt list --upgradable 2>/dev/null | grep -c security || echo "0")
        if [[ "$security_updates" -eq 0 ]]; then
            check_result "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" "PASS" "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"
        else
            check_result "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" "WARN" "$security_updates –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–∂–∏–¥–∞–µ—Ç"
        fi
    fi
}

generate_summary() {
    print_header "–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
    
    local pass_percent=0
    if [[ "$TOTAL_CHECKS" -gt 0 ]]; then
        pass_percent=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))
    fi
    
    echo -e "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${BLUE}$TOTAL_CHECKS${NC}"
    echo -e "–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$PASSED_CHECKS${NC} (${pass_percent}%)"
    echo -e "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${YELLOW}$WARNING_CHECKS${NC}"
    echo -e "–û—à–∏–±–∫–∏: ${RED}$FAILED_CHECKS${NC}"
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    if [[ "$FAILED_CHECKS" -eq 0 && "$WARNING_CHECKS" -eq 0 ]]; then
        echo -e "\n${GREEN}üéâ –°–ò–°–¢–ï–ú–ê –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò${NC}"
    elif [[ "$FAILED_CHECKS" -eq 0 && "$WARNING_CHECKS" -lt 5 ]]; then
        echo -e "\n${YELLOW}‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –í –•–û–†–û–®–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò (–µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)${NC}"
    elif [[ "$FAILED_CHECKS" -lt 3 ]]; then
        echo -e "\n${YELLOW}‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø${NC}"
    else
        echo -e "\n${RED}üö® –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–ê${NC}"
    fi
    
    echo -e "\n–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${CYAN}$REPORT_FILE${NC}"
    echo -e "–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${CYAN}$LOG_FILE${NC}"
}

run_performance_test() {
    print_section "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è –¥–∏—Å–∫–∞
    local read_speed=$(dd if=/dev/zero of=/tmp/test_write bs=1M count=10 2>&1 | grep -o '[0-9.]\+ MB/s' | head -1)
    rm -f /tmp/test_write
    if [[ -n "$read_speed" ]]; then
        check_result "–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–∏—Å–∫–∞" "PASS" "$read_speed"
    else
        check_result "–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–∏—Å–∫–∞" "WARN" "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å"
    fi
    
    # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
    local mem_test=$(timeout 5 stress-ng --vm 1 --vm-bytes 100M -t 3s 2>/dev/null && echo "OK" || echo "FAIL")
    if [[ "$mem_test" == "OK" ]]; then
        check_result "–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏" "PASS" "–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω"
    else
        check_result "–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏" "WARN" "–£—Ç–∏–ª–∏—Ç–∞ stress-ng –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    clear
    print_header "$SCRIPT_NAME v$VERSION"
    echo -e "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${CYAN}$(date)${NC}"
    echo -e "–•–æ—Å—Ç: ${CYAN}$(hostname)${NC}"
    echo -e "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${CYAN}$(whoami)${NC}"
    
    log "–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    {
        echo "HA System Health Check Report"
        echo "–í—Ä–µ–º—è: $(date)"
        echo "–•–æ—Å—Ç: $(hostname)"
        echo "=================================="
        echo ""
    } > "$REPORT_FILE"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_basic_system_info
    check_system_resources
    check_network_connectivity
    check_docker_services
    check_tailscale_vpn
    check_ha_monitoring_services
    check_log_files
    check_ha_services_availability
    check_recent_failures
    check_system_security
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)
    if command -v stress-ng >/dev/null 2>&1 || command -v dd >/dev/null 2>&1; then
        run_performance_test
    fi
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    generate_summary
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—á–µ—Ç: $REPORT_FILE"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing_tools=()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
    local required_tools=("bc" "docker" "systemctl")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç–∞—Ö
    if ! command -v jq >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —É—Ç–∏–ª–∏—Ç–∞ 'jq' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ Tailscale –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.${NC}"
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo -e "${RED}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–ª–µ–¥—É—é—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:${NC}"
        printf '  %s\n' "${missing_tools[@]}"
        echo -e "${YELLOW}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã${NC}"
        echo ""
    fi
}

# –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "HA System Health Check v$VERSION"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  -q, --quiet    –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)"
    echo "  -v, --verbose  –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    echo "  --quick        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)"
    echo "  --full         –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0              # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    echo "  $0 --quick      # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
    echo "  $0 --quiet      # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    -q|--quiet)
        exec > /dev/null
        ;;
    --quick)
        # –î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        QUICK_MODE=true
        ;;
    -v|--verbose)
        set -x
        ;;
esac

# –ó–∞–ø—É—Å–∫
check_dependencies
main

exit 0
