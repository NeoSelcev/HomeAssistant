# üè† Raspberry Pi Home Assistant Project Management Script
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º "—É–º–Ω–æ–≥–æ –¥–æ–º–∞" –Ω–∞ Raspberry Pi

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("connect", "status", "deploy", "backup", "logs", "restart", "update", "install", "check")]
    [string]$Action,
    
    [string]$RpiIP = "192.168.1.21",   # IP –≤–∞—à–µ–π –º–∞–ª–∏–Ω–∫–∏
    [int]$RpiPort = 22,                # SSH –ø–æ—Ä—Ç
    [string]$RpiUser = "root",         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    [string]$KeyPath = "$env:USERPROFILE\.ssh\id_ed25519"  # –ü—É—Ç—å –∫ SSH –∫–ª—é—á—É
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
function Write-Success { param($Message) Write-Host "‚úÖ $Message" -ForegroundColor Green }
function Write-Error { param($Message) Write-Host "‚ùå $Message" -ForegroundColor Red }
function Write-Info { param($Message) Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Cyan }
function Write-Warning { param($Message) Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–∞
function Test-SSHKey {
    if (-not (Test-Path $KeyPath)) {
        Write-Error "SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $KeyPath"
        Write-Info "–°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π: ssh-keygen -t ed25519 -f `"$KeyPath`""
        return $false
    }
    return $true
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥—ã
function Invoke-SSHCommand {
    param([string]$Command, [string]$Description = "")
    
    if ($Description) { Write-Info $Description }
    
    $sshArgs = @(
        "-i", $KeyPath
        "-p", $RpiPort
        "-o", "StrictHostKeyChecking=no"
        "-o", "UserKnownHostsFile=NUL"
        "$RpiUser@$RpiIP"
        $Command
    )
    
    & ssh $sshArgs
    if ($LASTEXITCODE -ne 0) {
        Write-Error "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: $Command"
        return $false
    }
    return $true
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ RPi
function Copy-ToRPi {
    param([string]$LocalPath, [string]$RemotePath, [string]$Description = "")
    
    if ($Description) { Write-Info $Description }
    
    $scpArgs = @(
        "-i", $KeyPath
        "-P", $RpiPort
        "-o", "StrictHostKeyChecking=no"
        "-o", "UserKnownHostsFile=NUL"
        "-r"
        $LocalPath
        "$RpiUser@$RpiIP`:$RemotePath"
    )
    
    & scp $scpArgs
    if ($LASTEXITCODE -ne 0) {
        Write-Error "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $LocalPath -> $RemotePath"
        return $false
    }
    return $true
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å RPi
function Copy-FromRPi {
    param([string]$RemotePath, [string]$LocalPath, [string]$Description = "")
    
    if ($Description) { Write-Info $Description }
    
    $scpArgs = @(
        "-i", $KeyPath
        "-P", $RpiPort
        "-o", "StrictHostKeyChecking=no"
        "-o", "UserKnownHostsFile=NUL"
        "-r"
        "$RpiUser@$RpiIP`:$RemotePath"
        $LocalPath
    )
    
    & scp $scpArgs
    if ($LASTEXITCODE -ne 0) {
        Write-Error "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $RemotePath -> $LocalPath"
        return $false
    }
    return $true
}

# –î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
function Connect-ToRPi {
    Write-Info "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Raspberry Pi: $RpiUser@$RpiIP`:$RpiPort"
    
    if (-not (Test-SSHKey)) { return }
    
    $commands = @(
        @{ cmd = "hostname"; desc = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞" }
        @{ cmd = "uptime"; desc = "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã" }
        @{ cmd = "free -h"; desc = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏" }
        @{ cmd = "df -h /"; desc = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞" }
        @{ cmd = "docker --version 2>/dev/null || echo 'Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'"; desc = "–í–µ—Ä—Å–∏—è Docker" }
    )
    
    foreach ($cmd in $commands) {
        Invoke-SSHCommand -Command $cmd.cmd -Description $cmd.desc
        Write-Host ""
    }
}

# –î–µ–π—Å—Ç–≤–∏–µ: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
function Get-SystemStatus {
    Write-Info "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    if (-not (Test-SSHKey)) { return }
    
    $statusScript = @"
#!/bin/bash
echo "=== üñ•Ô∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï ==="
echo "–•–æ—Å—Ç: `$(hostname)"
echo "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `$(uptime -p)"
echo "–ù–∞–≥—Ä—É–∑–∫–∞: `$(uptime | awk -F'load average:' '{print `$2}')"
echo "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: `$(cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null | awk '{print `$1/1000"¬∞C"}' || echo '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')"
echo ""

echo "=== üíæ –ü–ê–ú–Ø–¢–¨ –ò –î–ò–°–ö ==="
free -h
echo ""
df -h / /boot
echo ""

echo "=== üê≥ DOCKER ==="
if command -v docker >/dev/null 2>&1; then
    echo "Docker –≤–µ—Ä—Å–∏—è: `$(docker --version)"
    echo "–°—Ç–∞—Ç—É—Å Docker: `$(systemctl is-active docker)"
    echo ""
    echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
else
    echo "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi
echo ""

echo "=== üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì ==="
if systemctl list-timers | grep -q ha-watchdog; then
    echo "HA Watchdog: `$(systemctl is-active ha-watchdog.timer)"
    echo "HA Failure Notifier: `$(systemctl is-active ha-failure-notifier.timer)"
    echo "Telegram Sender: `$([ -f /usr/local/bin/telegram-sender.sh ] && echo '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' || echo '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
    echo ""
    echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:"
    tail -5 /var/log/ha-watchdog.log 2>/dev/null || echo "–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
else
    echo "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
fi
echo ""

echo "=== üåê –°–ï–¢–¨ ==="
ip addr show | grep -E "inet.*global" | awk '{print `$2, `$NF}'
echo ""
ping -c 1 8.8.8.8 >/dev/null 2>&1 && echo "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" || echo "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
"@

    $statusScript | Invoke-SSHCommand -Command "cat > /tmp/status.sh && chmod +x /tmp/status.sh && /tmp/status.sh && rm /tmp/status.sh"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function Deploy-Monitoring {
    Write-Info "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    if (-not (Test-SSHKey)) { return }
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    $tempDir = "/tmp/ha-monitoring-deploy"
    Invoke-SSHCommand -Command "mkdir -p $tempDir" -Description "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    $monitoringPath = ".\project\monitoring"
    Copy-ToRPi -LocalPath "$monitoringPath\*" -RemotePath $tempDir -Description "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    $installScript = @"
#!/bin/bash
cd $tempDir
chmod +x install.sh scripts/*.sh
./install.sh
"@

    $installScript | Invoke-SSHCommand -Command "cat > /tmp/install_monitoring.sh && chmod +x /tmp/install_monitoring.sh && /tmp/install_monitoring.sh"
    
    Write-Success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram –≤ /etc/telegram-sender/config"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
function Backup-System {
    Write-Info "üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if (-not (Test-SSHKey)) { return }
    
    $backupDir = ".\backups\$(Get-Date -Format 'yyyy-MM-dd_HH-mm-ss')"
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    $backupPaths = @(
        "/srv/home",
        "/etc/telegram-sender",
        "/etc/ha-watchdog",
        "/var/log/ha-*.log",
        "/var/log/telegram-sender.log",
        "/var/lib/ha-failure-notifier"
    )
    
    foreach ($path in $backupPaths) {
        $safePath = $path -replace "/", "_"
        Copy-FromRPi -RemotePath $path -LocalPath "$backupDir\$safePath" -Description "Backup: $path"
    }
    
    Write-Success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupDir"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
function Get-Logs {
    Write-Info "üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã..."
    
    if (-not (Test-SSHKey)) { return }
    
    $logScript = @"
#!/bin/bash
echo "=== üîç –õ–û–ì–ò WATCHDOG ==="
tail -20 /var/log/ha-watchdog.log 2>/dev/null || echo "–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
echo ""

echo "=== üîß –õ–û–ì–ò FAILURE NOTIFIER ==="
tail -20 /var/log/ha-failure-notifier.log 2>/dev/null || echo "–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
echo ""

echo "=== üì¢ –õ–û–ì–ò TELEGRAM SENDER ==="
tail -20 /var/log/telegram-sender.log 2>/dev/null || echo "–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
echo ""

echo "=== üö® –õ–û–ì–ò –°–ë–û–ï–í ==="
tail -20 /var/log/ha-failures.log 2>/dev/null || echo "–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
echo ""

echo "=== üê≥ –õ–û–ì–ò DOCKER ==="
journalctl -u docker --no-pager -l --lines=10
echo ""

echo "=== ‚öôÔ∏è  –õ–û–ì–ò SYSTEMD –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ==="
journalctl -u ha-watchdog.service --no-pager -l --lines=5
journalctl -u ha-failure-notifier.service --no-pager -l --lines=5
"@

    $logScript | Invoke-SSHCommand
}

# –î–µ–π—Å—Ç–≤–∏–µ: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
function Restart-Services {
    Write-Info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if (-not (Test-SSHKey)) { return }
    
    $commands = @(
        @{ cmd = "systemctl restart ha-watchdog.timer"; desc = "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ HA Watchdog" }
        @{ cmd = "systemctl restart ha-failure-notifier.timer"; desc = "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ HA Failure Notifier" }
        @{ cmd = "cd /srv/home && docker compose restart"; desc = "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" }
    )
    
    foreach ($cmd in $commands) {
        if (Invoke-SSHCommand -Command $cmd.cmd -Description $cmd.desc) {
            Write-Success $cmd.desc
        }
    }
}

# –î–µ–π—Å—Ç–≤–∏–µ: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
function Update-System {
    Write-Info "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    if (-not (Test-SSHKey)) { return }
    
    $updateScript = @"
#!/bin/bash
echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
apt update && apt upgrade -y

echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."
cd /srv/home
docker compose pull
docker compose up -d

echo "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker image prune -f

echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
"@

    $updateScript | Invoke-SSHCommand -Description "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
function Install-BaseSystem {
    Write-Info "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    
    if (-not (Test-SSHKey)) { return }
    
    # –ö–æ–ø–∏—Ä—É–µ–º setup —Å–∫—Ä–∏–ø—Ç—ã
    Copy-ToRPi -LocalPath ".\project\setup\*" -RemotePath "/tmp/" -Description "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"
    
    Invoke-SSHCommand -Command "chmod +x /tmp/*.sh && /tmp/rpi_auto_update_script.sh" -Description "–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"
}

# –î–µ–π—Å—Ç–≤–∏–µ: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
function Check-Everything {
    Write-Info "üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    if (-not (Test-SSHKey)) { return }
    
    $checkScript = @"
#!/bin/bash
echo "=== üè• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ==="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏
echo "üåê –°–ï–¢–¨:"
ping -c 1 8.8.8.8 >/dev/null 2>&1 && echo "  ‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "  ‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
ping -c 1 \$(ip route | awk '/default/ {print \$3}') >/dev/null 2>&1 && echo "  ‚úÖ –®–ª—é–∑ –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "  ‚ùå –®–ª—é–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
ip link show wlan0 | grep -q "state UP" && echo "  ‚úÖ WiFi –∞–∫—Ç–∏–≤–µ–Ω" || echo "  ‚ùå WiFi –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
echo "üíª –†–ï–°–£–†–°–´:"
mem_free=\$(free -m | awk '/Mem:/ {print \$7}')
[ \$mem_free -gt 100 ] && echo "  ‚úÖ –ü–∞–º—è—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (\${mem_free}MB)" || echo "  ‚ùå –ú–∞–ª–æ –ø–∞–º—è—Ç–∏ (\${mem_free}MB)"

disk_free=\$(df / | awk 'NR==2 {print \$4}')
[ \$disk_free -gt 500000 ] && echo "  ‚úÖ –ú–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (\$((disk_free/1024))MB)" || echo "  ‚ùå –ú–∞–ª–æ –º–µ—Å—Ç–∞ (\$((disk_free/1024))MB)"

temp=\$(cat /sys/class/thermal/thermal_zone0/temp 2>/dev/null | awk '{print \$1/1000}')
if [ ! -z "\$temp" ]; then
    [ \$(echo "\$temp < 70" | bc) -eq 1 ] && echo "  ‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è (\${temp}¬∞C)" || echo "  ‚ùå –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (\${temp}¬∞C)"
fi
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo "üê≥ DOCKER:"
if command -v docker >/dev/null 2>&1; then
    systemctl is-active docker >/dev/null 2>&1 && echo "  ‚úÖ Docker –∞–∫—Ç–∏–≤–µ–Ω" || echo "  ‚ùå Docker –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    containers=("homeassistant" "nodered")
    for container in "\${containers[@]}"; do
        if docker inspect -f '{{.State.Running}}' "\$container" 2>/dev/null | grep -q true; then
            echo "  ‚úÖ \$container —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            echo "  ‚ùå \$container –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        fi
    done
else
    echo "  ‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo "üö™ –ü–û–†–¢–´:"
timeout 2 bash -c '</dev/tcp/localhost/8123' 2>/dev/null && echo "  ‚úÖ Home Assistant (8123) –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "  ‚ùå Home Assistant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
timeout 2 bash -c '</dev/tcp/localhost/1880' 2>/dev/null && echo "  ‚úÖ Node-RED (1880) –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "  ‚ùå Node-RED –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo "üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì:"
systemctl is-active ha-watchdog.timer >/dev/null 2>&1 && echo "  ‚úÖ Watchdog –∞–∫—Ç–∏–≤–µ–Ω" || echo "  ‚ùå Watchdog –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
systemctl is-active ha-failure-notifier.timer >/dev/null 2>&1 && echo "  ‚úÖ Failure Notifier –∞–∫—Ç–∏–≤–µ–Ω" || echo "  ‚ùå Failure Notifier –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram —Å–µ—Ä–≤–∏—Å–∞
if [ -f /etc/telegram-sender/config ]; then
    source /etc/telegram-sender/config
    [ ! -z "\$TELEGRAM_BOT_TOKEN" ] && echo "  ‚úÖ Telegram Sender –Ω–∞—Å—Ç—Ä–æ–µ–Ω" || echo "  ‚ö†Ô∏è  Telegram Sender –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    [ -f /usr/local/bin/telegram-sender.sh ] && echo "  ‚úÖ Telegram Sender —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" || echo "  ‚ùå Telegram Sender —Å–∫—Ä–∏–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
else
    echo "  ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Sender –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi
echo ""

echo "=== üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° ==="
echo "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: \$(date)"
"@

    $checkScript | Invoke-SSHCommand
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function Show-Menu {
    Write-Host @"
üè† Raspberry Pi Home Assistant Project Manager
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
  connect   - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  status    - –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
  deploy    - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  backup    - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  logs      - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
  update    - –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ Docker –æ–±—Ä–∞–∑—ã
  install   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
  check     - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  -RpiIP     IP –∞–¥—Ä–µ—Å Raspberry Pi (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $RpiIP)
  -RpiPort   SSH –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $RpiPort)
  -RpiUser   SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $RpiUser)
  -KeyPath   –ü—É—Ç—å –∫ SSH –∫–ª—é—á—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $KeyPath)

–ü—Ä–∏–º–µ—Ä: .\manage.ps1 -Action connect -RpiIP 192.168.1.150
"@ -ForegroundColor Yellow
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
switch ($Action) {
    "connect" { Connect-ToRPi }
    "status" { Get-SystemStatus }
    "deploy" { Deploy-Monitoring }
    "backup" { Backup-System }
    "logs" { Get-Logs }
    "restart" { Restart-Services }
    "update" { Update-System }
    "install" { Install-BaseSystem }
    "check" { Check-Everything }
    default { Show-Menu }
}
